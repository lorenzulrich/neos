/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/DropdownMenu.js
class DropDownMenu {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll('.neos-dropdown-toggle');
    this._menu = this._root.querySelectorAll('.neos-dropdown-menu');

    this._setupEventListeners();
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _toggle(_event) {
    this._changeToogleIcon();

    this._root.classList.toggle('neos-dropdown-open');
  }

  _changeToogleIcon() {
    const openIcon = this._root.querySelector('.fa-chevron-down');

    const closeIcon = this._root.querySelector('.fa-chevron-up');

    if (openIcon) {
      openIcon.classList.replace('fa-chevron-down', 'fa-chevron-up');
    }

    if (closeIcon) {
      closeIcon.classList.replace('fa-chevron-up', 'fa-chevron-down');
    }
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/Expandable.js
class Expandable {
  constructor(_root, _triggerClassName, _onStateChange, initialState) {
    this._root = _root;
    this._trigger = this._root.querySelectorAll(_triggerClassName);
    this._onStateChange = _onStateChange;

    this._setupEventListeners();

    this._initialize(initialState);
  }

  _setupEventListeners() {
    this._trigger.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _initialize(initialState) {
    const header = this._root.querySelector('[aria-expanded]');

    header.setAttribute('aria-expanded', String(initialState));

    if (initialState) {
      // default is closed
      this._root.classList.add('neos-open');

      this._changeToogleIcon();
    }
  }

  _toggle() {
    this._changeToogleIcon();

    this._root.classList.toggle('neos-open');

    this._toogleAriaExpandable();
  }

  _toogleAriaExpandable() {
    const header = this._root.querySelector('[aria-expanded]');

    const expanded = this._root.classList.contains('neos-open');

    header.setAttribute('aria-expanded', String(expanded));

    if (typeof this._onStateChange === 'function') {
      const sectionName = this._root.getAttribute('data-key');

      this._onStateChange(sectionName, expanded);
    }
  }

  _changeToogleIcon() {
    const openIcon = this._root.querySelector('.fa-chevron-circle-down');

    const closeIcon = this._root.querySelector('.fa-chevron-circle-up');

    if (openIcon) {
      openIcon.classList.replace('fa-chevron-circle-down', 'fa-chevron-circle-up');
    }

    if (closeIcon) {
      closeIcon.classList.replace('fa-chevron-circle-up', 'fa-chevron-circle-down');
    }
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/isNil.js
const isNil = value => value === null || value === undefined;

/* harmony default export */ var Helper_isNil = (isNil);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/isEmpty.js


const isEmpty = object => {
  if (Helper_isNil(object)) {
    return false;
  }

  return !Object.getOwnPropertySymbols(object).length && !Object.getOwnPropertyNames(object).length;
};

/* harmony default export */ var Helper_isEmpty = (isEmpty);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/getItemByKeyValue.js


const getItemByKeyValue = (collection, key, value) => {
  if (Helper_isNil(collection)) {
    return null;
  }

  return collection.find(object => object[key] === value);
};

/* harmony default export */ var Helper_getItemByKeyValue = (getItemByKeyValue);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/getCollectionValueByPath.js


const getCollectionValueByPath = (collection, path) => {
  if (Helper_isNil(collection)) {
    return null;
  }

  return path.split('.').reduce((value, index) => {
    if (Helper_isNil(value)) {
      return null;
    }

    return value[index];
  }, collection);
};

/* harmony default export */ var Helper_getCollectionValueByPath = (getCollectionValueByPath);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/createCollectionByPath.js
/**
 * The function can be used to create objects or change values by path.
 * So if you give an empty collection like {} with a path like a.b.c
 * and a value, you get and object {a: {b: {c: 'value' } } } as response.
 *
 * You can also pass thru the collection  {a: {b: {c: 'value' } } } and change
 * a.b.c to newValue. So you get  {a: {b: {c: 'newValue' } } }.
 *
 * If you use numerals as key we expect that the value should be an array
 * instead of an object.
 *
 * @param {object} collection
 * @param {string} path
 * @param {mixed} value
 * @return {object}
 */
const createCollectionByPath = (collection, path, value) => {
  collection = typeof collection === "object" ? collection : {};
  const keys = Array.isArray(path) ? path : path.split(".");
  let currentStep = collection;

  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];

    if (!currentStep[key] && !Object.prototype.hasOwnProperty.call(currentStep, key)) {
      const nextKey = keys[i + 1];
      const useArray = /^\+?(0|[1-9]\d*)$/.test(nextKey);
      currentStep[key] = useArray ? [] : {};
    }

    currentStep = currentStep[key];
  }

  const finalStep = keys[keys.length - 1];
  currentStep[finalStep] = value;
  return collection;
};

/* harmony default export */ var Helper_createCollectionByPath = (createCollectionByPath);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/index.js






// CONCATENATED MODULE: ./Resources/Public/JavaScript/Services/Storage.js

const STORAGE_KEY = "persistedState";

const getStorage = () => {
  const storage = localStorage.getItem(STORAGE_KEY);
  const storageJson = JSON.parse(storage);
  return Helper_isNil(storageJson) ? {} : storageJson;
};

const loadStorageData = path => {
  const storage = getStorage();
  const storageData = Helper_getCollectionValueByPath(storage, path);
  return storageData;
};

const saveStorageData = (path, value) => {
  const storage = getStorage();
  const updatedStorageData = Helper_createCollectionByPath(storage, path, value);

  if (!Helper_isNil(updatedStorageData)) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedStorageData));
  }
};


// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/MenuPanel.js


const VALUE_PATH = "ui.drawer.collapsedMenuGroups";
class MenuPanel_MenuPanel {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll(".neos-menu-button");
    this._panel = this._root.querySelectorAll(".neos-menu-panel");
    this._menuSectionStates = this._loadMenuSectionStates();

    this._setupEventListeners();

    if (this._panel) {
      this._initializeMenuSections();
    }
  }

  _initializeMenuSections() {
    this._panel.forEach(_panel => {
      const menuSectionElements = _panel.querySelectorAll(".neos-menu-section");

      const sections = this._menuSectionStates;
      menuSectionElements.forEach(menuSectionElement => {
        const sectionName = menuSectionElement.getAttribute("data-key");
        const sectionState = !sections.includes(sectionName);
        new Expandable(menuSectionElement, ".neos-menu-panel-toggle", this._onMenuSectionStateChange.bind(this), sectionState);
      });
    });
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener("click", this._toggle.bind(this));
    });
  }

  _loadMenuSectionStates() {
    const storageData = loadStorageData(VALUE_PATH, []);
    return Array.isArray(storageData) ? storageData : [];
  }

  _saveMenuSectionStates() {
    if (Array.isArray(this._menuSectionStates)) {
      saveStorageData(VALUE_PATH, this._menuSectionStates);
    }
  }

  _onMenuSectionStateChange(sectionName, newValue) {
    if (this._menuSectionStates.includes(sectionName) && newValue === true) {
      this._menuSectionStates = this._menuSectionStates.filter(item => item !== sectionName);
    }

    if (!this._menuSectionStates.includes(sectionName) && newValue === false) {
      this._menuSectionStates.push(sectionName);
    }

    this._saveMenuSectionStates();
  }

  _toggle(_event) {
    this._button.forEach(_toggleButton => {
      _toggleButton.classList.toggle("neos-pressed");
    });

    document.body.classList.toggle("neos-menu-panel-open");
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/index.js




// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/Tree.js


const Tree_VALUE_PATH = "module.configuration";
class Tree_Tree {
  constructor(_root) {
    this._root = _root;
    this._type = this._root.getAttribute("data-type");
    this._treeBranchStates = this._loadTreeBranchStates(true);
    this._nodes = this._root.querySelectorAll(".neos-tree-node");

    this._initializeTree();

    this._setupEventListeners();
  }

  _initializeTree() {
    this._nodes.forEach(_node => {
      if (_node.firstChild.nodeName.toLowerCase() !== "ul") {
        this._wrapElementWithNodeTitle(_node.firstChild);
      }

      const hasSubnodes = _node.querySelectorAll(".neos-tree-node");

      if (this._isFolder(_node) && !Helper_isNil(hasSubnodes) && hasSubnodes.length > 0) {
        const expandIcon = this._createExpandIcon();

        _node.insertBefore(expandIcon, _node.firstChild);
      }
    });
  }

  _initializeTreeState(items) {
    if (!Array.isArray(items)) {
      return;
    }

    items.forEach(_item => {
      const node = this._root.querySelector(`[title="${_item}"`);

      if (!Helper_isNil(node)) {
        node.classList.add("neos-tree-open");
      }
    });
  }

  _setupEventListeners() {
    this._nodes.forEach(_node => {
      _node.addEventListener("click", this._onNodeClick.bind(this));
    });
  }

  _onNodeClick(event) {
    event.preventDefault();
    event.stopPropagation();
    const node = event.target.closest(".neos-tree-node");

    if (!Helper_isNil(node)) {
      this._deselectCurrentActiveNode();

      node.classList.toggle("neos-tree-active");
    }

    if (this._isFolder(node)) {
      this._toggle(node);
    }
  }

  _deselectCurrentActiveNode() {
    this._root.querySelectorAll(".neos-tree-active").forEach(_node => {
      _node.classList.remove("neos-tree-active");
    });
  }

  _createExpandIcon() {
    const expandIcon = document.createElement("span");
    expandIcon.classList.add("neos-tree-expander");
    return expandIcon;
  }

  _wrapElementWithNodeTitle(element) {
    const nodeTitle = document.createElement("span");
    nodeTitle.classList.add("neos-tree-title");
    element.parentNode.insertBefore(nodeTitle, element);
    nodeTitle.appendChild(element);
  }

  _isFolder(node) {
    return !Helper_isNil(node) && node.classList.contains("neos-tree-folder");
  }

  _toggle(node) {
    node.classList.toggle("neos-tree-open");

    this._changeTreeBranchState(node.getAttribute("title"), node.classList.contains("neos-tree-open"));
  }

  _getPathForType() {
    const path = Tree_VALUE_PATH + (!Helper_isEmpty(this._type) ? "." + this._type : "");
    return path.toLowerCase();
  }

  _loadTreeBranchStates(init) {
    const pathWithType = this._getPathForType();

    const storageData = loadStorageData(pathWithType, []);

    if (!Helper_isNil(init) && init === true) {
      this._initializeTreeState(storageData);
    }

    this._treeBranchStates = Array.isArray(storageData) ? storageData : [];
    return this._treeBranchStates;
  }

  _saveTreeBranchStates() {
    const pathWithType = this._getPathForType();

    if (Array.isArray(this._treeBranchStates)) {
      saveStorageData(pathWithType, this._treeBranchStates);
    }
  }

  _changeTreeBranchState(path) {
    if (Helper_isEmpty(path) || !Array.isArray(this._treeBranchStates)) {
      return;
    }

    if (this._treeBranchStates.includes(path)) {
      this._treeBranchStates = this._treeBranchStates.filter(item => item !== path);
    } else {
      this._treeBranchStates.push(path);
    }

    this._saveTreeBranchStates();
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/index.js


const dropDownMenuElements = document.querySelectorAll('.neos-user-menu');
dropDownMenuElements.forEach(dropDownElement => {
  new DropDownMenu(dropDownElement);
});
const menuPanelElements = document.querySelectorAll('.neos-menu');
menuPanelElements.forEach(panelElement => {
  new MenuPanel_MenuPanel(panelElement);
});
const treeElements = document.querySelectorAll('.neos-tree-container');
treeElements.forEach(treeElement => {
  new Tree_Tree(treeElement);
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,