/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/DropdownMenu.js
class DropDownMenu {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll('.neos-dropdown-toggle');
    this._menu = this._root.querySelectorAll('.neos-dropdown-menu');

    this._setupEventListeners();
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _toggle(_event) {
    this._changeToogleIcon();

    this._root.classList.toggle('neos-dropdown-open');
  }

  _changeToogleIcon() {
    const openIcon = this._root.querySelector('.fa-chevron-down');

    const closeIcon = this._root.querySelector('.fa-chevron-up');

    if (openIcon) {
      openIcon.classList.replace('fa-chevron-down', 'fa-chevron-up');
    }

    if (closeIcon) {
      closeIcon.classList.replace('fa-chevron-up', 'fa-chevron-down');
    }
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/Expandable.js
class Expandable {
  constructor(_root, _triggerClassName, _onStateChange, initialState) {
    this._root = _root;
    this._trigger = this._root.querySelectorAll(_triggerClassName);
    this._onStateChange = _onStateChange;

    this._setupEventListeners();

    this._initialize(initialState);
  }

  _setupEventListeners() {
    this._trigger.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _initialize(initialState) {
    const header = this._root.querySelector('[aria-expanded]');

    header.setAttribute('aria-expanded', String(initialState));

    if (initialState) {
      // default is closed
      this._root.classList.add('neos-open');

      this._changeToogleIcon();
    }
  }

  _toggle() {
    this._changeToogleIcon();

    this._root.classList.toggle('neos-open');

    this._toogleAriaExpandable();
  }

  _toogleAriaExpandable() {
    const header = this._root.querySelector('[aria-expanded]');

    const expanded = this._root.classList.contains('neos-open');

    header.setAttribute('aria-expanded', String(expanded));

    if (typeof this._onStateChange === 'function') {
      const sectionName = this._root.getAttribute('data-key');

      this._onStateChange(sectionName, expanded);
    }
  }

  _changeToogleIcon() {
    const openIcon = this._root.querySelector('.fa-chevron-circle-down');

    const closeIcon = this._root.querySelector('.fa-chevron-circle-up');

    if (openIcon) {
      openIcon.classList.replace('fa-chevron-circle-down', 'fa-chevron-circle-up');
    }

    if (closeIcon) {
      closeIcon.classList.replace('fa-chevron-circle-up', 'fa-chevron-circle-down');
    }
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/isNil.js
const isNil = value => value === null || value === undefined;

/* harmony default export */ var Helper_isNil = (isNil);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/isEmpty.js


const isEmpty = object => {
  if (Helper_isNil(object)) {
    return false;
  }

  return !Object.getOwnPropertySymbols(object).length && !Object.getOwnPropertyNames(object).length;
};

/* harmony default export */ var Helper_isEmpty = (isEmpty);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/getItemByKeyValue.js


const getItemByKeyValue = (collection, key, value) => {
  if (Helper_isNil(collection)) {
    return null;
  }

  return collection.find(object => object[key] === value);
};

/* harmony default export */ var Helper_getItemByKeyValue = (getItemByKeyValue);
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Helper/index.js




// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/MenuPanel.js


const SESSION_KEY = 'Neos.Neos.menuSectionStates';
class MenuPanel_MenuPanel {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll('.neos-menu-button');
    this._panel = this._root.querySelectorAll('.neos-menu-panel');
    this._menuSectionStates = this._loadSessionData();

    this._setupEventListeners();

    if (this._panel) {
      this._initializeMenuSections();
    }
  }

  _initializeMenuSections() {
    this._panel.forEach(_panel => {
      const menuSectionElements = _panel.querySelectorAll('.neos-menu-section');

      const {
        sections
      } = this._menuSectionStates;
      menuSectionElements.forEach(menuSectionElement => {
        const sectionName = menuSectionElement.getAttribute('data-key');
        const sectionState = Helper_getItemByKeyValue(sections, 'name', sectionName);
        const initalState = !Helper_isNil(sectionState) ? sectionState.open : false;
        new Expandable(menuSectionElement, '.neos-menu-panel-toggle', this._onMenuSectionStateChange.bind(this), initalState);
      });
    });
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _loadSessionData() {
    const sessionData = sessionStorage.getItem(SESSION_KEY);

    if (Helper_isNil(sessionData)) {
      const initialSessionData = {
        sections: []
      };
      sessionStorage.setItem(SESSION_KEY, JSON.stringify(initialSessionData));
      return initialSessionData;
    }

    return JSON.parse(sessionData);
  }

  _onMenuSectionStateChange(sectionName, newValue) {
    const {
      sections
    } = this._menuSectionStates;
    const sectionState = Helper_getItemByKeyValue(sections, 'name', sectionName);

    if (Helper_isNil(sections)) {
      this._menuSectionStates.sections = [];
    }

    if (Helper_isNil(sectionState)) {
      this._menuSectionStates.sections.push({
        name: sectionName,
        open: newValue
      });
    } else {
      sectionState.open = newValue;
    }

    sessionStorage.setItem(SESSION_KEY, JSON.stringify(this._menuSectionStates));
  }

  _toggle(_event) {
    this._button.forEach(_toggleButton => {
      _toggleButton.classList.toggle('neos-pressed');
    });

    document.body.classList.toggle('neos-menu-panel-open');
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/index.js




// CONCATENATED MODULE: ./Resources/Public/JavaScript/index.js

const dropDownMenuElements = document.querySelectorAll('.neos-user-menu');
dropDownMenuElements.forEach(dropDownElement => {
  new DropDownMenu(dropDownElement);
});
const menuPanelElements = document.querySelectorAll('.neos-menu');
menuPanelElements.forEach(panelElement => {
  new MenuPanel_MenuPanel(panelElement);
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,