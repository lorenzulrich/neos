/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/DropdownMenu.js
class DropDownMenu {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll('.neos-dropdown-toggle');
    this._menu = this._root.querySelectorAll('.neos-dropdown-menu');

    this._setupEventListeners();
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _toggle(_event) {
    this._changeToogleIcon();

    this._root.classList.toggle('neos-open');
  }

  _changeToogleIcon() {
    const openIcon = this._root.querySelector(`.fa-caret-down`);

    const closeIcon = this._root.querySelector(`.fa-caret-up`);

    if (openIcon) {
      openIcon.classList.remove('fa-caret-down');
      openIcon.classList.add('fa-caret-up');
    }

    if (closeIcon) {
      closeIcon.classList.remove('fa-caret-up');
      closeIcon.classList.add('fa-caret-down');
    }
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/MenuPanel.js
class MenuPanel {
  constructor(_root) {
    this._root = _root;
    this._button = this._root.querySelectorAll('.neos-menu-button');
    this._panel = this._root.querySelectorAll('.neos-menu-panel');

    this._setupEventListeners();
  }

  _setupEventListeners() {
    this._button.forEach(_toggleButton => {
      _toggleButton.addEventListener('click', this._toggle.bind(this));
    });
  }

  _toggle(_event) {
    this._button.forEach(_toggleButton => {
      _toggleButton.classList.toggle('neos-pressed');
    });

    document.body.classList.toggle('neos-menu-panel-open');
  }

}
// CONCATENATED MODULE: ./Resources/Public/JavaScript/Components/TopBar/index.js



// CONCATENATED MODULE: ./Resources/Public/JavaScript/index.js

const dropDownMenuElements = document.querySelectorAll('.neos-user-menu');
dropDownMenuElements.forEach(dropDownElement => {
  new DropDownMenu(dropDownElement);
});
const menuPanelElements = document.querySelectorAll('.neos-menu');
menuPanelElements.forEach(panelElement => {
  new MenuPanel(panelElement);
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,